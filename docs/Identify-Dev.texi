\input amigatexinfo
\input texinfo-e   @c -*-texinfo-*-

@c *
@c * identify.library
@c *
@c * Copyright (C) 2010 Richard "Shred" Körber
@c *   http://identify.shredzone.org
@c *
@c * This program is free software: you can redistribute it and/or modify
@c * it under the terms of the GNU General Public License / GNU Lesser
@c * General Public License as published by the Free Software Foundation,
@c * either version 3 of the License, or (at your option) any later version.
@c *
@c * This program is distributed in the hope that it will be useful,
@c * but WITHOUT ANY WARRANTY; without even the implied warranty of
@c * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
@c *

@c > +- header
@c %**start of header
@setfilename Identify-Dev.guide
@settitle identify.library
@c %**end of header
@iftex
@setchapternewpage on
@end iftex
@c <

@set version 13.1

@c > +- titlepage
@titlepage
@title identify.library
@subtitle A library that converts cryptical IDs to a human-readable form (developer documentation)
@subtitle Version @value{version}, @today{}
@author Richard Körber

@page
@vskip 0pt plus 1filll
Copyright @copyright{} 1996-2001 by Richard Körber

Please read the Copyright chapter!
@end titlepage
@c <
@c > +- top
@node Top, Copyright, (dir), (dir)
@c node-name, next, previous, up ***

@menu
TABLE OF CONTENTS
*****************


                          ___________
                      | _| _  _ |.|_ \\/
                      |(_|(/_| )|||  /    v@value{version}


                      == THE ORIGINAL ==

________________________________________________________________________

* 1. Copyright:Copyright.         Please read!
* 2. Address:Address.             My Address / Updates

* 3. ARexx:ARexx.                 The ARexx interface
* 4. InstallIfy:InstallIfy.       InstallIfy

REGISTER
*    Concept Index:Concept Index.
________________________________________________________________________

         (C) 1996-2010 Richard Körber -- All Rights Reserved

@end menu

@c <
@c >    +- Copyright
@node Copyright, Address, Top, Top
@chapter Copyright
@cindex Copyright

Please read the following parts carefully.

If you do not agree to these Copyright notes, you must delete this
archive and all related files.

@table @strong
@item COPYRIGHT
@cindex Copyright note

@emph{NOTE:} You accept the following terms by starting the software,
even for a test drive only.

Identify is @copyright{} Copyright 1996-2010 by Richard Körber. All rights reserved.

You only have the right to use the software, but no rights on
the software itself. Disassembling, resourcing and all other ways
of reverse engineering is forbidden. This means the expansion database
in particular!

@item FREEWARE
@cindex FreeWare

Identify is FreeWare. You are allowed to use the packet without
paying a fee or similar to the author.

@item COPYING

You can copy the packet as long as it remains entire and unchanged.

You are allowed to compress the packet using a customary compression
software (as lha, lzh, lzx, dms). You must not compress single files of
the packet (e.g. PowerPacker or Imploder).

@item PARTIAL COPYING

You are allowed to add the files @code{identify.library}, @code{rexxidentify.library}
and @code{InstallIfy} to your own program packet, without the need
to add the whole Identify packet. In this case, you
@emph{must} mention in the documentation that you are using Identify
by Richard Körber, and where a full Identify distribution is available.

@item DISTRIBUTION

You must not exceed an usual price on the market for your working
and material. This means a maximum of 5 DM (or the equivalent amount
in other currencies) for disks and 35 DM for CD-ROMs containing a PD
software collection.

I explicitly permit the distribution via AmiNet, Meeting Pearls,
Fred Fish and other well-known PD series.

@item LIABILITY

You are using the program as it is, with all flaws, and on your
own risk! I grant no warranty for the software meeting a special
purpose. This software may cause financial damage or harm people.

@item LIMITATIONS

You are not allowed to use this software and its results

@itemize @bullet
@item for fascism or military purposes
@item if you do not agree to the copyright note
@end itemize

In this case you must delete the software and all related and
generated files immediately!

@item TRADEMARKS

All Copyrights and Trademarks are held by their owners.

@end table

@c <
@c >    +- Address
@node Address, ARexx, Copyright, Top
@chapter My Address
@cindex Address

Please send all bug-reports, board descriptions, missing
graphic OS, keyfiles, flames and so on to one of the following
e-mail addresses:

@table @strong
@item INTERNET
@cindex E-Mail
@cindex Homepage

I'm reachable through Internet via this E-Mail address:

@example
shred@@shredzone.de
@end example


Check my home page for the latest release and other programs. The URL
is:

@example
http://www.shredzone.de
@end example

@end table


@c <
@c >    +- ARexx
@node ARexx, InstallIfy, Address, Top
@chapter ARexx
@cindex ARexx
@cindex rexxidentify.library

Since V6.0 an ARexx function library is available. You can now also
use Identify in your ARexx scripts.

To do so, you just have to install the @code{rexxidentify.library}
into @code{libs:}. The library is included into ARexx by using a
@code{CALL AddLib("/libs/rexxidentify.library",0,-30,0)} command.

These functions are available since Release 1:

@table @code
@item ID_Release()
Returns the release- and version numbers of the @code{rexxidentify.library}.
The format is: `@code{<release> <version>.<revision>(<date>)}' (Example:
`@code{1 1.0(23.4.97)}'). You should use the @code{<release>} part to
check out if a function or option is available (e.g. @code{Word(ID_Release(),1)}).
The result can also be easily split up into the single contents by using the
@code{PARSE} command.

@item ID_NumBoards()
Returns the number of expansion boards added to the system. You can easily
construct a loop for @code{ID_Expansion}, using this function.

@item ID_Expansion(<board>,<result code>)
Returns the appropriate result to the board number @code{<board>} (0 to
@code{ID_NumBoards()}-1) and the @code{<result code>}. Result codes are:
@table @code
@item MANUF
Manufacturer name
@item PROD
Product name
@item CLASS
Product class (localized)
@item ADDRESS
Memory address of the expansion (hexadecimal)
@item SIZE
Reserved amount of memory for the expansion board (decimal, KBytes)
@item SHUTUP
Has the expansion been shut up? (0:No, 1:Yes)
@item SECONDARY
(since Release 4) Checks if the entry is primary (Result: @code{Primary})
or secondary (Result: @code{Secondary}).
@item CLASSID
(since Release 5) Returns the Class ID of the expansion board, see include
files (decimal).
@end table

@item ID_Function(<library>,<offset>)
Returns the name of the @code{<library>}'s function and the offset
@code{<offset>}. See the Shell program @code{Function}.

@item ID_Alert(<code>,<result code>)
Returns the appropriate result to the alert code @code{<code>} (hexadecimal
string) and the @code{<result code>}. Result codes are:
@table @code
@item DEAD
Deadend or Recovery?
@item SUBSYS
System causing the alert
@item GENERAL
General alert class
@item SPEC
Specific alert class
@end table
See the Shell program @code{Guru}.

@item ID_Hardware(<result code>,@{<option>,...@})
Returns a description of the hardware. @code{<result code>} are:
@table @code
@item SYSTEM
Used Amiga model (e.g. @samp{Amiga 4000})
@item CPU
Used CPU
@item FPU
Used FPU, if available
@item MMU
Used MMU, if available
@item OSVER
AmigaOS ROM version
@item EXECVER
exec.library version
@item WBVER
Workbench version, if available
@item ROMSIZE
Size of the AmigaOS ROM.
@item CHIPSET
Available chip set (e.g. @samp{AGA})
@item GFXSYS
Used graphics system (e.g. @samp{CyberGraphX})
@item CHIPRAM
Total size of Chip RAM (includes virtual RAM)
@item FASTRAM
Total size of Fast RAM (includes virtual RAM)
@item RAM
Total size of total RAM (includes virtual RAM)
@item SETPATCHVER
SetPatch version, if available.
@item AUDIOSYS
Used audio system (e.g. @samp{AHI})
@item OSNR
Used OS version (e.g. @samp{3.5})
@item VMMCHIPRAM
Size of virtual Chip RAM
@item VMMFASTRAM
Size of virtual Fast RAM
@item VMMRAM
Size of virtual RAM
@item PLNCHIPRAM
Size of physical Chip RAM
@item PLNFASTRAM
Size of physical Fast RAM
@item PLNRAM
Size of physical RAM
@item VBR
Address of the processor vectors
@item LASTALERT
Last system alert
@item VBLANKFREQ
VBlank interrupt frequency
@item POWERFREQ
Power frequency
@item ECLOCK
Special system clock's frequency
@item SLOWRAM
Size of the A500 and A2000's special Fast RAM.
@item GARY
Gary version
@item RAMSEY
Ramsey version
@item BATTCLOCK
Battery backed up clock available?
@item CHUNKYPLANAR
Does a chunky planar hardware exist?
@item POWERPC
Is a PowerPC available?
@item PPCCLOCK
The clock of the PowerPC, in MHz units.
@item CPUREV
(since Release 5) Returns the revision of the built-in CPU, if available.
@item CPUCLOCK
(since Release 5) Returns the CPU clock, in MHz units.
@item FPUCLOCK
(since Release 5) Returns the FPU clock, if available, in MHz units.
@item RAMACCESS
(since Release 6) Returns the access time of the motherboard RAM (unit ns), if available.
@item RAMWIDTH
(since Release 6) Returns the width of the motherboard RAM (bit), if available.
@item RAMCAS
(since Release 6) Returns the CAS mode of the motherboard RAM, if available.
@item RAMBANDWIDTH
(since Release 6) Returns the motherboard RAM bandwidth, if available.
@item TCPIP
(since Release 7) Returns the used TCP/IP stack, if started.
@item PPCOS
(since Release 7) Returns the PowerPC OS (PowerUp, WarpOS), if available.
@item AGNUS
(since Release 7) Returns the Agnus chip revision, if available.
@item AGNUSMODE
(since Release 7) Returns the Agnus chip mode (PAL or NTSC).
@item DENISE
(since Release 8) Returns the Denise chip version, if available.
@item DENISEREV
(since Release 8) Returns the Denise chip revision, if available.
@item BOINGBAG
(since Release 10) Returns the BoingBag number, if available.
@item EMULATED
(since Release 11) Returns 0 if this is a real Amiga. Any other value
means that the Amiga is emulated.
@item XLVERSION
(since Release 11) The major version number of the AmigaXL emulator.
0 if AmigaXL is not available.
@item HOSTOS
(since Release 11) The host operating system of the emulated Amiga.
Currently only available on AmigaXL systems.
@item HOSTVER
(since Release 11) The host operating system version of the emulated Amiga.
Currently only available on AmigaXL systems.
@item HOSTMACHINE
(since Release 11) The host architecture of the emulated Amiga.
Currently only available on AmigaXL systems.
@item HOSTCPU
(since Release 11) The host CPU of the emulated Amiga.
Currently only available on AmigaXL systems.
@item HOSTSPEED
(since Release 11) The host CPU speed of the emulated Amiga.
Currently only available on AmigaXL systems.
@end table

These @code{<options>} are allowed:
@table @code
@item EMPTYNA
Returns an empty string if the item is not available. Otherwise, a localized
`not available' kind of string is returned.
@item NOLOCALE
The return string is always in English, independent of the current language.
@end table

See also the AutoDocs of @code{IdHardware()}.
@end table

These functions are available since Release 2:

@table @code
@item ID_ExpName(<manufid>,<prodid>,<result code>)
Returns the appropriate result to the manufacturer @code{<manufid>} (0 to
65535), product @code{<prodid>} (0 to 255) and the @code{<result code>}.
Note that Identify cannot differ between expansions with the same product
ID in this access mode. Result codes are:
@table @code
@item MANUF
Manufacturer name
@item PROD
Product name
@item CLASS
Product class (localized)
@end table
@end table

These functions are available since Release 4:

@table @code
@item ID_LockCX()
Fetches a copy of all currently present commodities and returns a
slot for it. You must always provide this slot to the other functions.

@item ID_CountCX(<slot>)
Results is the number of commodities found.

@item ID_GetCX(<slot>,<nr>,<result code>)
Returns the appropriate result to the commodity @code{<nr>} of the
slot @code{<slot>}. Result codes are:
@table @code
@item NAME
Name of the commodity
@item TITLE
Title of the commodity
@item DESC
A short description
@item GUI
Result is @samp{1} if the commodity provides a GUI, @samp{0} otherwise.
@item ACTIVE
Result is @samp{1} if the commodity is active, @samp{0} otherwise.
@end table

@item ID_UnlockCX(<slot>)
Frees the slot. You must not use it after that!
@end table

These functions are available since Release 6:

@table @code
@item ID_Update()
Actualizes the hardware information. Please use it wisely (see AutoDocs).
@end table

Some example programs you'll find in the @code{arexx} drawer.


@c <
@c >    +- InstallIfy
@node InstallIfy, Concept Index, ARexx, Top
@chapter InstallIfy
@cindex InstallIfy

Since V9.0, a new tool has been added.

InstallIfy allows you to import identify's hardware information
into Installer scripts.

So you can find out in an Installer script, if e.g. a PowerPC
is available, what PowerPC OS is used, or if sufficient processor
power is available.

InstallIfy should be invoked with the installer's RUN function.
The name for the desired hardware information is provided, and the
appropriate numerical result is returned as DOS return code. For
example:

@example
(set rc (run "c:InstallIfy POWERPC" (safe)))
(if (<> rc 0)       ; PowerPC
  (message "A PowerPC is available!")
)
@end example

These options are available:

@table @code
@item FIELD
Here, the name of the desired hardware field is passed. This are the
same as for the ARexx @code{ID_Hardware} command. See the include files
to find out how the return code has to be interpreted.

@item UPDATE
If this option is set, the @code{identify.library} hardware information
cache will be flushed. Use this option wisely, see @code{ListExp}.

@item HELP
Shows a short help page and exits.
@end table

There is an example Installer script in the developer packet. Just have
a look at it and see how InstallIfy is used.

@c <
@c >    +- Concept Index

@node Concept Index,  , InstallIfy, Top
@unnumbered Concept Index
@printindex cp

@contents

@c <

@bye
